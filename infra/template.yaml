AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: "デプロイ先環境"
    Default: stg
    AllowedValues:
      - stg
      - prd
  Org:
    Type: String
    Description: "CI/CD ワークフローが配置されている GitHub repository の org 名 (個人の場合は username)"
    Default: wand2016
  Repo:
    Type: String
    Description: "CI/CD ワークフローが配置されている GitHub repository の repo 名"
    Default: blog
  Domain:
    Type: String
    Description: "デプロイ先ドメイン。ゾーン頂点を想定。ステージング環境はこのドメインの stg サブドメインにデプロイされる。"
  HostedZoneId:
    Type: String
    Description: "デプロイ先ドメインの Route53 Hosted Zone ID。 ACM Certificate を自動で認証するために必須。"

Conditions:
  IsProd: !Equals
    - !Ref Environment
    - 'prd'
  # 本番以外ではアクセス制限をかける。
  UseAccessControl: !Not
    - !Condition IsProd

Resources:
  # ============================================================================
  # S3 bucket + policy for CloudFront origin
  # ============================================================================
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3-web-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WebBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub ${WebBucket.Arn}/*
              - !Sub ${WebBucket.Arn}
            Condition:
              StringEquals:
                AWS:SourceArn:
                  - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}
          - Principal:
              AWS: !GetAtt DeploymentRole.Arn
            Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub ${WebBucket.Arn}/*
              - !Sub ${WebBucket.Arn}
  WebBucketOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: always
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        Name: !Sub ${AWS::StackName}-oac

  # ============================================================================
  # CloudFront distribution + Certificate + A Record
  #
  # 下記理由につき WAFv2 WebACL は外した。
  # * 月に 5 USD (prd/stg 2 環境で 10 USD) もかかる
  # * CF + S3 の静的サイトなので攻撃する価値がそもそも薄い
  # * WAF で DDoS は防げるが、結局 Route 53 破産狙いの EDoS は防げない
  # * STG 環境のアクセス制限は cognito-at-edge で実現しているため、 IP 制限なども必要ない
  # ============================================================================
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsProd
        - !Sub ${Domain}
        - !Sub ${Environment}.${Domain}
      DomainValidationOptions:
        - DomainName: !If
          - IsProd
          - !Sub ${Domain}
          - !Sub ${Environment}.${Domain}
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          TargetOriginId: WebBucketOrigin
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # UserAgentRefererHeaders
          LambdaFunctionAssociations:
            - !If
              - UseAccessControl
              - LambdaFunctionARN: !Sub ${AccessControlFunction.Version}
                EventType: viewer-request
              - !Ref AWS::NoValue
            - LambdaFunctionARN: !Sub ${IndexSupplierFunction.Version}
              EventType: origin-request
        PriceClass: PriceClass_200
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        Origins:
          - DomainName: !GetAtt WebBucket.RegionalDomainName
            Id: WebBucketOrigin
            OriginAccessControlId: !GetAtt WebBucketOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
        Aliases:
          - !If
            - IsProd
            - !Sub ${Domain}
            - !Sub ${Environment}.${Domain}
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
  DistributionAliasARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-aliastarget.html
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - IsProd
        - !Sub ${Domain}
        - !Sub ${Environment}.${Domain}
      Type: A
  IndexSupplierFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambdaedge-index-supplier-role
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  IndexSupplierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambdaedge-index-supplier
      CodeUri: ./src/index-supplier/
      Handler: app.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt IndexSupplierFunctionRole.Arn
      AutoPublishAlias: !Ref Environment
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - aws-lambda
  # ============================================================================
  # Access Control with Lambda@Edge + Cognito User Pool (cognito-at-edge)
  # ============================================================================
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Condition: UseAccessControl
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-userpool
      UserPoolTier: LITE
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameConfiguration:
        CaseSensitive: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      MfaConfiguration: 'ON'
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: UseAccessControl
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${AWS::StackName}-userpoolclient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - phone
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !If
          - IsProd
          - !Sub https://${Domain}
          - !Sub https://${Environment}.${Domain}
      LogoutURLs: []
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Condition: UseAccessControl
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub ${AWS::StackName}
      ManagedLoginVersion: 1
  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseAccessControl
    Properties:
      Name: !Sub '/${AWS::StackName}-lambdaedge-access-control/user-pool-id'
      Tier: Standard
      Type: String
      Value: !GetAtt CognitoUserPool.UserPoolId
  CognitoUserPoolClientIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseAccessControl
    Properties:
      Name: !Sub '/${AWS::StackName}-lambdaedge-access-control/user-pool-client-id'
      Tier: Standard
      Type: String
      Value: !GetAtt CognitoUserPoolClient.ClientId
  CognitoUserPoolDomainParameter:
    Type: AWS::SSM::Parameter
    Condition: UseAccessControl
    Properties:
      Name: !Sub '/${AWS::StackName}-lambdaedge-access-control/user-pool-domain'
      Tier: Standard
      Type: String
      Value: !Sub ${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
  AccessControlFunctionRole:
    Type: AWS::IAM::Role
    Condition: UseAccessControl
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambdaedge-access-control-role
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-lambdaedge-access-control-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # NOTE: GetParameters は順序が保証されないので使用しない
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}-lambdaedge-access-control/*'
  AccessControlFunction:
    Type: AWS::Serverless::Function
    Condition: UseAccessControl
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambdaedge-access-control
      CodeUri: ./src/access-control/
      Handler: app.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt AccessControlFunctionRole.Arn
      AutoPublishAlias: !Ref Environment
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: false
        EntryPoints:
          - app.ts
        External:
          - aws-lambda
          - '@aws-sdk/*'
        # HACK: crypto の dynamic require のエラーを回避する
        # see https://github.com/aws/aws-sam-cli/issues/4827#issuecomment-1574080427
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
  # ============================================================================
  # CI/CD deployment role
  # ============================================================================
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-deployment-role
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com"
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              "StringLike":
                "token.actions.githubusercontent.com:sub": !Sub "repo:${Org}/${Repo}:*"
              "StringEquals":
                "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-deployment-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub ${WebBucket.Arn}/*
                  - !Sub ${WebBucket.Arn}

Outputs:
  BucketName:
    Description: "Web bucket name"
    Value: !Ref WebBucket
  DeploymentRoleArn:
    Description: "ARN of the deployment role"
    Value: !GetAtt DeploymentRole.Arn
  DistributionUrl:
    Description: "URL of the website hosted on CloudFront"
    Value: !If
      - IsProd
      - !Sub "https://${Domain}/"
      - !Sub "https://${Environment}.${Domain}/"
